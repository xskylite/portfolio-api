generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Project {
  id      String  @id @default(cuid())
  name    String
  logo    String?
  version String?
  website String?

  technologies ProjectTechnology[]

  isDone             Boolean @default(false)
  isReceivingUpdates Boolean @default(false)
  isInProduction     Boolean @default(false)

  description  String
  previewImage String?

  category ProjectCategory // PERSONAL, ORDER, OPENSOURCE
  type     ProjectType // FRONTEND, BACKEND, BOTS

  displayOrder Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("projects")
}

model ProjectTechnology {
  id        String  @id @default(cuid())
  projectId String
  skillId   String
  version   String?

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  skill   Skill   @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@map("project_technologies")
}

model Skill {
  id          String        @id @default(cuid())
  name        String        @unique
  icon        String?
  category    SkillCategory // ALL, FRONTEND, BACKEND, DEVOPS
  isActiveUse Boolean       @default(true)
  description String?

  projectTechnologies ProjectTechnology[]

  displayOrder Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("skills")
}

model WeatherCache {
  id            String @id @default(cuid())
  location      String @unique
  temp_c        Float
  temp_f        Float
  description   String
  icon          String
  conditionCode Int
  humidity      Int?
  windSpeed     Float?

  cachedAt  DateTime @default(now())
  expiresAt DateTime

  @@map("weather_cache")
}

model SpotifyCache {
  id     String @id @default(cuid())
  userId String @unique @default("user")

  trackName  String?
  artistName String?
  albumName  String?
  albumImage String?
  isPlaying  Boolean @default(false)
  trackId    String?

  cachedAt  DateTime @default(now())
  expiresAt DateTime

  @@map("spotify_cache")
}

enum ProjectCategory {
  PERSONAL
  ORDER
  OPENSOURCE
}

enum ProjectType {
  FRONTEND
  BACKEND
  BOTS
}

enum SkillCategory {
  ALL
  FRONTEND
  BACKEND
  DEVOPS
}
